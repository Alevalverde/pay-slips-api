openapi: 3.0.3
info:
  version: 1.0.0
  termsOfService: 'http://swagger.io/terms/'
  title: Pay-Slips-API
  license:
    name: ISC
  contact:
    name: Alejandro Valverde
    email: avalverde@midasconsultores.com.ar
paths:
  '/pay-slips/{id}':
    get:
      tags:
        - Pay Slips
      summary: Get pay slip by id
      description: This endpoint returns data to the pay slip
      operationId: getPaySlip
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/DownloadPaySlipResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  '/pay-slips/upload':
    post:
      tags:
        - Pay Slips
      summary: Upload PDF file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFiles'
      description: Upload PDF file of all pay slips per pay period.
      operationId: uploadPaySlipByMonth
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/users/':
    get:
      tags:
        - Users
      summary: Get all users.
      description: This endpoint returns a list of users with pagination
      operationId: getAllUser
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/sort_dir'
      responses:
        '200':
          $ref: '#/components/responses/GetAllUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  '/users/{id}':
    get:
      tags:
        - Users
      summary: Get user by id.
      description: This endpoint returns an user by id
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
    post:
      tags:
        - Users
      summary: Create a new user
      description: This endpoint creates a new user
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
    patch:
      tags:
        - Users
      summary: Update an user by id
      description: This endpoint update an user by id
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
    delete:
      tags:
        - Users
      summary: Remove an user by id
      description: This endpoint remove an user by id
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
servers:
  - url: '{protocol}://{domain}{port}/{baseUrl}/{apiVersion}'
    description: Default
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      domain:
        default: localhost
      port:
        default: ':8080'
      baseUrl:
        default: 'api'
      apiVersion:
        enum:
          - 'v1'
        default: 'v1'
components:
  requestBodies:
    CreateUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserBody'
            required: true
  responses:
    Success:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardResponse'
    CreateSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSuccessResponse'
    Unauthorized:
      description: Access token is missing or is invalid
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DownloadPaySlipResponse:
      description: File
      content:
        application/pdf:
          schema:
            type: string
            format: binary
            description: PDF file
      headers:
        Content-Disposition:
          description: Indicates if file will be displayed or downloaded
          schema:
            type: string
            example: attachment; filename="Bonos de sueldo - SEPT 2024.pdf"
    GetUserResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/StandardResponse'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
                  message:
                    type: string
                    example: null
                    nullable: true
    GetAllUserResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/StandardResponse'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
                  message:
                    type: string
                    example: null
                    nullable: true
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    BadRequestResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  status:
                    example: 400
                  message:
                    example: The date is invalid
    UnauthorizedResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  status:
                    example: 401
                  message:
                    example: Invalid username or password
    ForbiddenResponse:
      description: You do not have permission to access this resource
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  status:
                    example: 403
                  message:
                    example: You do not have permission to perform this action.
    InternalErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  status:
                    example: 500
                  message:
                    example: Internal server error
    InternalServerError:
      description: Internal server error
  schemas:
    UserBody:
      type: object
      properties:
        name:
          type: string
          example: Riquelme, Juan Rom√°n
        cuil:
          type: string
          example: 23-12345678-1
    CreateSuccessResponse:
      type: object
      properties:
        status:
          type: number
          example: 201
        message:
          type: string
          example: Successful operation
        data:
          example: null
    StandardResponse:
      type: object
      properties:
        status:
          type: number
          example: 200
        message:
          type: string
          example: 'Successful operation'
        data:
          anyOf:
            - type: object
            - type: array
      required:
        - status
        - message
        - data
    StandardResponseList:
      allOf:
        - $ref: '#/components/schemas/StandardResponse'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
    Users:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        cuil:
          type: string
        createdAt:
          type: string
          example: 2024-12-15T00:00:00.000Z
        updatedAt:
          type: string
          example: 2024-12-15T00:00:00.000Z
    UploadFiles:
      type: object
      properties:
        file:
          type: string
          format: binary
        nameFile:
          type: string
          example: 'BS'
        month:
          type: string
          example: 'ABR'
        year:
          type: string
          example: '2024'
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
        status:
          type: number
          example: 500
        message:
          type: string
          example: Internal server error
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
        status:
          type: number
          example: 400
    ErrorItem:
      type: object
      properties:
        key:
          type: string
          example: error.message.key
        message:
          type: string
          example: Error message example. Same as the outer 'message' property.
    Pagination:
      type: object
      properties:
        count:
          type: number
          example: 1
        page:
          type: number
          example: 1
        page_size:
          type: number
          example: 10
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number
      schema:
        type: number
        default: 1
        minimum: 1
    page_size:
      name: page_size
      in: query
      description: Limit the number of results
      required: false
      schema:
        type: integer
        minimum: 1
        default: 10
    sort:
      name: sort
      in: query
      description: Attribute to sort by
      schema:
        type: string
        example: name
    sort_dir:
      name: sort_dir
      in: query
      description: Sorting direction
      schema:
        type: string
        enum:
          - ASC
          - DESC
    typeSort:
      name: typeSort
      in: query
      description: sorting by date or engagement
      schema:
        type: string
        enum:
          - engagement
          - date
